module PriorityLock_tb;

logic clk, rst_n;
logic [3:0] req, grant;

// Instantiate DUT
PriorityLock uut (
    .clk(clk),
    .rst_n(rst_n),
    .req(req),
    .grant(grant)
);

// Clock generation
initial clk = 0;
always #5 clk = ~clk;

initial begin
    $dumpfile("dump.vcd"); $dumpvars;

    rst_n = 0; req = 4'b0000;
    #12;
    rst_n = 1;
    
    // Case 1: multiple requests (req[3] and req[0])
    req = 4'b1001;
    #50; // observe grants

    // Case 2: single request (req[2])
    req = 4'b0100;
    #30; // observe grant

    // Case 3: no requests
    req = 4'b0000;
    #20;

    // Case 4: all requesters active
    req = 4'b1111;
    #60; // observe arbiter round-robin

    // Case 5: persistent request on req[1]
    req = 4'b0010;
    #40;

    // Finish simulation
    $finish;
end

endmodule
