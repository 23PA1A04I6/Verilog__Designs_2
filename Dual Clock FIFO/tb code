 module DualClockFIFO_tb;

logic wr_clk=0, rd_clk=0;
always #3 wr_clk=~wr_clk; // faster
always #7 rd_clk=~rd_clk; // slower

logic wr_rst_n, rd_rst_n, wr_en, rd_en;
logic [7:0] din, dout;
logic empty, full;

DualClockFIFO uut (
    .wr_clk(wr_clk), .wr_rst_n(wr_rst_n), .wr_en(wr_en), .din(din),
    .rd_clk(rd_clk), .rd_rst_n(rd_rst_n), .rd_en(rd_en),
    .dout(dout), .empty(empty), .full(full)
);

initial begin
    $dumpfile("dump.vcd"); $dumpvars;
    wr_rst_n=0; rd_rst_n=0; wr_en=0; rd_en=0; din=0;
    #20; wr_rst_n=1; rd_rst_n=1;

    // write few items
    repeat(4) begin
        #6; din=$random; wr_en=1;
    end
    wr_en=0;

    // read items
    #50; rd_en=1; #50; rd_en=0;

    // write again
    repeat(2) begin
        #6; din=$random; wr_en=1;
    end
    wr_en=0;

    // read again
    #30; rd_en=1; #40; rd_en=0;

    #20; $finish;
end

endmodule

